# This is a basic spec for the DCS world EDM files
# Special types:
#   uint_string   means a uint-prefixed string
#   zstring       would mean a null-terminated string
#   uchar         Single byte as an integer
#   byte          Single byte as a bytes object (or array of such)
# Literal string prefixes:
#   b"data"       raw byte data - no prefix/suffix
#   uip"ssds"     UINT-prefixed string
#   z"stringdat"  Null-terminated string

FILE := 
  HEADER header
  model::RootNode firstNode
  byte unknown[1652]
  CRNODEDICT lookup

INDEX_ENTRY :=
  uint_string name
  uint   index

INDEX := 
  uint length
  INDEX_ENTRY entries[length]

HEADER :=
  b"EDM"
  ushort version
  INDEX indexA
  INDEX indexB

NODELIST := 
  uint length
  NODE nodes[length]

PROPLIST :=
  uint length
  PROPNODE props[length]

MATERIALLIST :=
  uint length
  model::Material defs[length]

model::Material :=
  uint length
  MATERIALDEF defs[length]

MATERIALDEF := DEFBLENDING | DEFCULLING | DEFDEPTHBIAS | DEFVERTEXFORMAT | DEFTEXCOORDCHANNELS | DEFMATERIALNAME | DEFNAME | DEFUNIFORMS | DEFANIMATEDUNIFORMS | DEFSHADOWS | DEFTEXTURES

NODE := model::RootNode | model::Node | model::TransformNode | model::ArgRotationNode | model::ArgPositionNode | model::ArgAnimationNode | model::ArgVisibilityNode | model::ArgScaleNode | PROPNODE

PROPNODE := model::Property<float> | PROPUINTNODE | model::Property<osg::Vec2f> | model::Property<osg::Vec3f> | model::AnimatedProperty<float>

model::RootNode :=
  uip"model::RootNode"
  uint_string description
  uint version
  PROPLIST properties
  byte unknown[145]
  MATERIALLIST matList
  byte unknown2[8]
  NODELIST nodes

ARGANIMBASE :=
  # Starting here
  model::BaseNode base
  osg::Matrixd matrix
  osg::Vec3d vecA
  osg::Vec4d vecB
  osg::Vec4d vecC
  osg::Vec3d vecD
  uint     arg
  # This becomes length 256 and is common to all Arg* types

model::ArgPositionNode :=
  uip"model::ArgPositionNode"
  uint_string name
  byte animBaseLike[248]
  uint posArgCount
  AANPOSARG posArgs[posArgCount]
  uint unsureA
  uint unsureB

model::ArgScaleNode :=
  uip"model::ArgScaleNode"
  uint_string name
  byte data[260]

model::ArgRotationNode := 
  uip"model::ArgRotationNode"
  uint_string name
  byte animBaseLike[248]
  b"\x00\x00\x00\x00"
  uint rotArgCount
  AANROTARG rotArgs[rotArgCount]
  b"\x00\x00\x00\x00"

AANPOSARG :=
  uint arg
  uint count
  byte posData[32*count]

AANROTARG :=
  uint arg
  uint count
  byte rotData[40*count]

AANVISARG :=
  uint arg
  uint count
  byte visData[16*count]

model::ArgAnimationNode :=
  uip"model::ArgAnimationNode"
  uint_string name
  byte animBaseLike[248]
  uint posArgCount
  AANPOSARG posArgs[posArgCount]
  uint rotArgCount
  AANROTARG rotArgs[rotArgCount]
  # Only know instances that terminate with zero
  b"\x00\x00\x00\x00"

model::ArgVisibilityNode :=
  uip"model::ArgVisibilityNode"
  uint_string name
  byte unknown[8]
  uint count
  AANVISARG visData[count]

# Validated from binary

# The binary basis for all nodes
model::BaseNode :=
  uint unknown[3]
  
model::Node :=
  uip"model::Node"
  model::BaseNode base

model::TransformNode :=
  uip"model::TransformNode"
  model::BaseNode base
  osg::Matrixd transform



# Properties are implicitly understandable

PROPUINTNODE := 
  uip"model::Property<unsigned int>"
  uint_string name
  uint value

model::Property<float> := 
  uip"model::Property<float>"
  uint_string name
  float value


model::Property<osg::Vec2f> :=
  uip"model::Property<osg::Vec2f>"
  uint_string name
  osg::Vec2f vector

model::Property<osg::Vec3f> :=
  uip"model::Property<osg::Vec3f>"
  uint_string name
  osg::Vec3f vector

model::AnimatedProperty<float> :=
  uip"model::AnimatedProperty<float>"
  uint_string name
  float data[8]

DEFBLENDING :=
  uip"BLENDING"
  uchar mode

DEFCULLING := 
  uip"CULLING" key
  uchar mode

DEFDEPTHBIAS :=
  uip"DEPTH_BIAS"
  uint mode

DEFVERTEXFORMAT :=
  uip"VERTEX_FORMAT"
  byte format[30]

DEFTEXCOORDCHANNELS :=
  uip"TEXTURE_COORDINATES_CHANNELS"
  byte channels[52]

DEFMATERIALNAME :=
  uip"MATERIAL_NAME"
  uint_string name

DEFNAME :=
  uip"NAME" key
  uint_string name

DEFUNIFORMS :=
  uip"UNIFORMS"
  NODELIST uniformNames

DEFANIMATEDUNIFORMS :=
  uip"ANIMATED_UNIFORMS"
  NODELIST animatedUniforms

DEFSHADOWS :=
  uip"SHADOWS"
  uchar mode

DEFTEXTURES :=
  uip"TEXTURES"
  uint length
  DEFTEXTURE textures[length]

DEFTEXTURE :=
  b"\x00\x00\x00\x00\xff\xff\xff\xff"
  uint_string name
  b"\x02\x00\x00\x00\x02\x00\x00\x00\n\x00\x00\x00\x06\x00\x00\x00"
  MATRIX matrix

MATRIX :=
  float data[16]

# From binary
osg::Matrixd :=
  double data[16]

osg::Vec2d :=
  double data[2]

osg::Vec3d :=
  double data[3]

osg::Vec4d :=
  double data[4]

osg::Vec2f := 
  float data[2]

osg::Vec3f :=
  float data[3]

osg::Vec4f :=
  float data[3]

CRNODEDICT :=
  uint count
  CRNODEDICTENTRY entry[count]

CRNODEDICTENTRY := CONNECTORS | RENDER_NODES

CONNECTORS :=
  uip"CONNECTORS"
  uint count
  model::Connector connectors[count]

model::Connector :=
  uip"model::Connector"
  uint_string name
  byte data[16]

RENDER_NODES :=
  uip"RENDER_NODES"
  uint node_count
  model::RenderNode renderNodes[node_count]

RNINTSECTION := RNTWOINT | RNTHREEINT

RNTWOINT := 
  uint data[1]
  b"\xFF\xFF\xFF\xFF"

RNTHREEINT :=
  uint data[2]
  b"\xFF\xFF\xFF\xFF"

RNINDEXDATA := RNSHORTINDEX | RNCHARINDEX

RNSHORTINDEX := 
  b"\x01"
  uint entries
  uint unknown
  ushort indexData[entries]

RNCHARINDEX :=
  b"\x00"
  uint entries
  uint unknown
  uchar indexData[entries]

model::RenderNode :=
  uip"model::RenderNode"
  uint_string name
  model::BaseNode base
  uint material
  uint isectionCount
  RNINTSECTION iSection[isectionCount]
  uint vertexCount
  uint vertexStride
  float vertexData[vertexCount*vertexStride]
  RNINDEXDATA indexData

